<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="example.sample.project.repository.mybatis.FoodItemMapper">
	
	<resultMap type="FoodItem" id="foodItemMap">
		<id property="id" column="id"/>
		<result property="itemName" column="itemName"/>
		<result property="content" column="content"/>
		<result property="price" column="price"/>
		<result property="soldout" column="soldout"/>
		<result property="foodType" column="foodType"/>
		<collection property="options" column="id" select="selectFoodItemOptions"></collection>
<!-- column="id" select="selectFoodItemOptions" id값을 가지고 selectFoodItemOptions를 실행 한 결과를 
FoodItem에 담겠다-->
	</resultMap>
	
	<insert id="insert" parameterType="FoodItem">
		<selectKey keyProperty="id" resultType="java.lang.Integer"
			order="BEFORE">
			select foodPK.nextVal as id from dual
		</selectKey>
		insert into foodItem(id, itemName, content, price, soldout, foodType, shopCode)
		values(#{id},
		#{itemName}, #{content}, #{price}, #{soldout}, #{foodType}, #{shopCode})
	</insert>
	
	<select id="selectByIdWithOptions" resultMap="foodItemMap"><!--위에 resultMap과 연결되는 부분 -->
		select id, itemName, content, price, soldout, foodType, shopCode
		from foodItem
		where id = #{id}
	</select>
	
	<insert id="insertFoodItemOptions">
		insert into foodItemOptions (foodId, options)
			values (#{id}, #{options})
	</insert>
	
	<insert id="insertFoodItemOptionsList">
		<foreach collection="options" item="item" open="insert All" 
		close="select * from dual" separator=" ">
			INTO foodItemOptions VALUES(#{id}, #{item})
		</foreach>
	</insert>
	<!-- 
	insert All
	INTO foodItemOptions VALUES(#{id}, #{item})
	INTO foodItemOptions VALUES(#{id}, #{item})
	INTO foodItemOptions VALUES(#{id}, #{item})
	select * from dual
	 -->
	 
	<delete id="deleteFoodItemOptions">
		delete from foodItemOptions
		where foodid=#{id}
	</delete>
	
	<select id="selectById" resultType="FoodItem">
		select id, itemName, content, price, soldout, foodType, shopCode
		from foodItem
		where id = #{id}
	</select>
	
	<select id="selectFoodItemOptions" resultType="String">
		select options from foodItemOptions
		where foodid =#{id}
	</select>
	
	<select id="selectAll" resultType="FoodItem">
		select id, itemName, content, price, soldout, foodType, shopCode
		from foodItem
		order by id
	</select>

	<!-- <select id="selectSearchAll" resultType="FoodItem"> select id, itemName, 
		content, price from foodItem where 1=1 where조건에 문제없게 만듦. if가 참일경우만 실행되니 id 
		null일경우 밑에 쿼리가 이상해짐 <if test="id != null"> AND id = #{id} </if> <if test="itemName 
		!= null"> AND itemName = #{itemName} </if> <if test="content != null"> AND 
		content like '%'||#{content}||'%' </if> order by id </select> -->

	<select id="selectSearchAll" resultType="FoodItem">
		select id, itemName, content, price, soldout, foodType, shopCode
		from foodItem
		<where>
			<foreach item="id" index="index" collection="ids" open="id IN (" separator="," close=")">
				#{id}
			</foreach>
			<if test="id != null">
				id = #{id}
			</if>
			<if test="itemName != null">
				AND itemName = #{itemName} 
				<!-- where태그로 감싸면 id가 null이어도 itemName앞에 AND자동으로 지워주기 때문에 괜찮 -->
			</if>
			<if test="content != null">
				AND content like '%'||#{content}||'%'
			</if>
			<if test="price != null and price lt 10000">
			<!-- <![CDATA[AND price <= #{price}]]>  --> <!-- 부등호 쓸거면 이 안에서 써야함 -->
				AND price &lt; #{price} <!-- &lt; &gt;-->
			</if>
		</where>
		order by id
	</select>
	
	<!-- <select id="selectSearchAll" resultType="FoodItem">
		select id, itemName, content, price
		from foodItem
		<choose>
			<when test="id != null">
				id = #{id}
			</when>
			<when test="itemName != null">
				AND itemName = #{itemName} 
			</when>
			<otherwise>
				AND content like '%'||#{content}||'%'
			</otherwise>
		</choose>
		order by id
	</select> -->

	<update id="update" parameterType="FoodItem">
		update foodItem
		set itemName = #{updateItem.itemName},
		content = #{updateItem.content},
		price = #{updateItem.price},
		soldout = #{updateItem.soldout},
		foodType = #{updateItem.foodType},
		shopCode = #{updateItem.shopCode}
		where id= #{id}
	</update>

	<delete id="deleteAll">
		delete from foodItem
	</delete>

</mapper>